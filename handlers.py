import json
import random
from operator import itemgetter

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import Command
from config import STRATZ_TOKEN, STEAM_API_KEY
from keyboard import *
from graphql_queries import *
import aiohttp
import re
from datetime import datetime

router = Router()

user_data = {}
items = {}
hero = {}


async def make_graphql_request(query: str, variables: dict):
    url = "https://api.stratz.com/graphql"
    headers = {
        "Authorization": f"Bearer {STRATZ_TOKEN}",
        "Content-Type": "application/json",
        "User-Agent": "STRATZ_API"
    }

    payload = {
        "query": query,
        "variables": variables
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as response:
            print(response)
            return await response.json()


async def get_steam_id_from_url(profile_url: str) -> str:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –ø—Ä—è–º–æ–π —Å SteamID64
    if "/profiles/" in profile_url:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º SteamID64 –∏–∑ —Å—Å—ã–ª–∫–∏
        steam_id = re.search(r"/profiles/(\d+)", profile_url)
        if steam_id:
            return str(int(steam_id.group(1)) - 76561197960265728)

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º Steam API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SteamID64
    if "/id/" in profile_url:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å—Å—ã–ª–∫–∏
        username = re.search(r"/id/([^/]+)", profile_url)
        if username:
            username = username.group(1)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Steam API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SteamID64
            async with aiohttp.ClientSession() as session:
                async with session.get(
                        f"https://api.steampowered.com/ISteamUser/ResolveVanityURL/v0001/?key={STEAM_API_KEY}&vanityurl={username}") as response:
                    data = await response.json()
                    if data.get("response", {}).get("success") == 1:
                        return str(int(data["response"]["steamid"]) - 76561197960265728)

    return None


async def validate_steam_id(steam_id: str) -> bool:
    try:
        response = await make_graphql_request(
            VALIDATE_STEAM_ID_QUERY,
            {"steamId": int(steam_id)}
        )
        return response.get('data', {}).get('player', {}).get('steamAccount') is not None
    except:
        return False


@router.message(Command("start"))
async def start(message: Message):
    global items, user_data
    user_data[message.from_user.id] = None
    if not items:
        with open('jsons/items.json', 'r') as f:
            items = json.load(f)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Dota 2.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≤–æ–π Steam –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://steamcommunity.com/id/Young_Flexe –∏–ª–∏ https://steamcommunity.com/profiles/76561198875033785):"
    )


@router.message(Command("info"))
async def info(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç STRATZ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Dota 2."
    )


@router.message(F.text)
async def process_steam_url(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π
    if not re.match(r"https?://steamcommunity\.com/(profiles/\d+|id/\w+)", message.text):
        await message.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ Steam –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º SteamID64 –∏–∑ —Å—Å—ã–ª–∫–∏
    steam_id = await get_steam_id_from_url(message.text)
    if not steam_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Steam ID –∏–∑ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Steam ID —á–µ—Ä–µ–∑ STRATZ API
    if await validate_steam_id(steam_id):
        user_data[message.from_user.id] = steam_id
        await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=main_menu())
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π Steam ID. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    try:
        steam_id = user_data.get(callback.from_user.id)

        response = await make_graphql_request(
            PROFILE_QUERY,
            {"steamId": int(steam_id)}
        )
        data = response.get('data', {}).get('player', {})
        if not data:
            return await callback.message.edit_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        steam_account = data.get('steamAccount', {})
        name = steam_account.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        mas = ["–†–µ–∫—Ä—É—Ç", "–°—Ç—Ä–∞–∂", "–†—ã—Ü–∞—Ä—å", "–ì–µ—Ä–æ–π", "–õ–µ–≥–µ–Ω–¥–∞", "–í–ª–∞—Å—Ç–µ–ª–∏–Ω", "–ë–æ–∂–µ—Å—Ç–≤–æ", "–¢–∏—Ç–∞–Ω"]
        mmr = steam_account.get('seasonRank', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        avatar = steam_account.get('avatar', None)
        if avatar == 'https://avatars.steamstatic.com/0000000000000000000000000000000000000000_full.jpg' or avatar == None:
            avatar = 'https://avatars.steamstatic.com/fef49e7fa7e1997310d705b2a6158ff8dc1cdfeb_full.jpg'
        matches = data.get('matchCount', 0)
        wins = data.get('winCount', 0)
        behavior = data.get('behaviorScore', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if mmr != None:
            rank = f"{mas[mmr // 10 - 1]} {['I', 'II', 'III', 'IV', 'V'][mmr % 10 - 1]}" if mmr < 75 else "Immortal"
        else:
            rank = None

        text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞:\n"
            f"‚îú –ò–º—è: {name}\n"
            f"‚îú –ó–≤–∞–Ω–∏–µ: {rank}\n"
            f"‚îú –°—ã–≥—Ä–∞–Ω–æ –º–∞—Ç—á–µ–π: {matches}\n"
            f"‚îú –ü–æ–±–µ–¥: {wins}\n"
            f"‚îú –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {wins / matches * 100:.2f}%\n"
            f"‚îî –ü–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç—å: {behavior}"
        )
        await callback.message.delete()

        await callback.message.answer_photo(
            photo=avatar,
            caption=text,
            reply_markup=back_button()
        )
    except Exception as e:
        await callback.message.delete()
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=back_button()
        )
    finally:
        await callback.answer()


@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=settings_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "change_steam_id")
async def change_steam_id(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π Steam ID:",
        reply_markup=back_button()
    )
    await callback.answer()


@router.callback_query(F.data == "back")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.delete()

    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "stats")
async def show_stats_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        reply_markup=stats_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "match_history")
async def show_match_history(callback: CallbackQuery):
    try:
        steam_id = user_data.get(callback.from_user.id)
        response = await make_graphql_request(
            MATCH_HISTORY_QUERY,
            {"steamId": int(steam_id), "take": 6}
        )

        matches = response.get('data', {}).get('player', {}).get('matches', [])
        if not matches:
            return await callback.message.edit_text(
                "–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=back_button()
            )

        text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–∞—Ç—á–µ–π:\n\n"
        ids = []
        for match in matches:
            player = next((p for p in match['players']), None)
            if not player:
                continue

            ids.append(match['id'])
            result = "–ü–æ–±–µ–¥–∞" if player['isVictory'] else "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
            duration = f"{divmod(match['durationSeconds'], 60)[0]}:{divmod(match['durationSeconds'], 60)[1]:02}"
            date = datetime.fromtimestamp(match['startDateTime'])

            text += (
                f"üïí {date}\n"
                f"üßô‚Äç‚ôÇÔ∏è –ì–µ—Ä–æ–π: {player['hero']['displayName']}\n"
                f"‚öîÔ∏è K/D/A: {player['kills']}/{player['deaths']}/{player['assists']}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
                f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
                f"üÜî {match['id']}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
        await callback.message.edit_text(
            text,
            reply_markup=list_back(ids)
        )
    except Exception as e:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π",
            reply_markup=back_button()
        )
    finally:
        await callback.answer()


@router.callback_query(F.data == "last_match")
async def show_last_match(callback: CallbackQuery):
    try:
        steam_id = user_data.get(callback.from_user.id)
        response = await make_graphql_request(
            LAST_MATCH_QUERY,
            {"steamId": int(steam_id)}
        )

        match = response.get('data', {}).get('player', {}).get('matches', [])
        avg_stats = response.get('data', {}).get('heroStats', {}).get('stats', [])

        if not match:
            return await callback.message.edit_text(
                "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=back_button()
            )

        match = match[0]
        player = next((p for p in match['players']), None)
        if not player:
            return await callback.message.edit_text(
                "–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=back_button()
            )

        hero_id = player['hero']['id']
        data = analytics(match, avg_stats[hero_id - 1])

        result = "–ü–æ–±–µ–¥–∞" if player['isVictory'] else "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
        duration = f"{divmod(match['durationSeconds'], 60)[0]}:{divmod(match['durationSeconds'], 60)[1]:02}"
        date = datetime.fromtimestamp(match['startDateTime'])
        hero = player['hero']
        hero_name = hero['displayName']
        hero_image = f"https://cdn.stratz.com/images/dota2/heroes/{hero['shortName']}_horz.png"
        it = [items[str(player[f'item{i}Id'])] for i in range(6) if player[f'item{i}Id']] + [
            items[str(player[f'backpack{i}Id'])] for i in range(3) if player[f'backpack{i}Id']]
        items_text = ' | '.join(it) if it else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

        text = (
            f"üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á:\n\n"
            f"üïí –î–∞—Ç–∞: {date}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
            f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n\n"
            f"üåï{sum(match['radiantKills'])}‚öîÔ∏è{sum(match['direKills'])}üåë\n"
            f"üßô‚Äç‚ôÇÔ∏è –ì–µ—Ä–æ–π: {hero_name}\n"
            f"‚¨ÜÔ∏è –£—Ä–æ–≤–µ–Ω—å: {player['level']}\n"
            f"‚öîÔ∏è K/D/A: {player['kills']}/{player['deaths']}/{player['assists']}\n"
            f"üü¢ –î–æ–±–∏–≤–∞–Ω–∏—è: {player['numLastHits']}\n"
            f"üî¥ –ù–µ –æ—Ç–¥–∞–Ω–æ: {player['numDenies']}\n"
            f"üíé –¶–µ–Ω–Ω–æ—Å—Ç—å: {player['networth']}\n"
            f"üí∞ GPM: {player['goldPerMinute']}\n"
            f"üìà XPM: {player['experiencePerMinute']}\n"
            f"üí• –£—Ä–æ–Ω: {player['heroDamage']}\n\n"
            f"üéí –ü—Ä–µ–¥–º–µ—Ç—ã:\n {items_text}\n\n"
            f'üóø–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤:\n'
            f'KDA: {round((avg_stats[hero_id-1]['kills'] + avg_stats[hero_id-1]['assists']) / avg_stats[hero_id-1]['deaths'], 1)}({round(data[5][0], 1)}%)\n'
            f'GPM: {round(avg_stats[hero_id-1]['networth'] / avg_stats[hero_id-1]['time'], 1)}({round(data[5][2], 1)}%)\n'
            f'XPM: {round(avg_stats[hero_id-1]['xp'] / avg_stats[hero_id-1]['time'], 1)}({round(data[5][1], 1)}%)\n'
            f'–¶–µ–Ω–Ω–æ—Å—Ç—å: {round(avg_stats[hero_id-1]['networth'], 1)}({round(data[5][3], 1)}%)\n'
            f"ü§ñ–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –≤–µ—Ä—Å–∏–∏ DotaLens: {round(data[0], 1)} Score \n"
            f"üëæ–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –≤–µ—Ä—Å–∏–∏ Stratz:\nScore | {player['imp']} | "
        )

        if -40 >= player['imp']:
            text += f"–£–∂–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif -20 >= player['imp']:
            text += f"–û—á–µ–Ω—å —Å–ª–∞–±–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif -10 >= player['imp']:
            text += f"–°–ª–∞–±–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif 10 > player['imp']:
            text += f"–°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif 20 > player['imp']:
            text += f"–•–æ—Ä–æ—à–µ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif 40 > player['imp']:
            text += f"–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
        else:
            text += f"–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"

        text += f'\n**(–°—Ä–µ–¥–Ω–∏–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º —è–≤–ª—è–µ—Ç—Å—è 0, —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç—Ç–æ!)\n\n'
        text += f"üÜî {match['id']}"

        await callback.message.delete()

        await callback.message.answer_photo(
            photo=hero_image,
            caption=text,
            reply_markup=match_back(match['id'])
        )
    except Exception as e:
        await callback.message.delete()
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–∞—Ç—á–µ",
            reply_markup=back_button()
        )
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("match_id:"))
async def show_match_ids(callback: CallbackQuery):
    try:
        _, id = callback.data.split(":")
        steam_id = user_data.get(callback.from_user.id)
        response = await make_graphql_request(
            MATCH_ID_QUERY,
            {"steamId": int(steam_id), "matchId": int(id)}
        )

        match = response.get('data', {}).get('player', {}).get('matches', [])
        avg_stats = response.get('data', {}).get('heroStats', {}).get('stats', [])

        match = match[0]
        player = next((p for p in match['players']), None)
        if not player:
            return await callback.message.edit_text(
                "–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=back_button()
            )

        hero_id = player['hero']['id']
        data = analytics(match, avg_stats[hero_id - 1])

        result = "–ü–æ–±–µ–¥–∞" if player['isVictory'] else "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
        duration = f"{divmod(match['durationSeconds'], 60)[0]}:{divmod(match['durationSeconds'], 60)[1]:02}"
        date = datetime.fromtimestamp(match['startDateTime'])
        hero = player['hero']
        hero_name = hero['displayName']
        hero_image = f"https://cdn.stratz.com/images/dota2/heroes/{hero['shortName']}_horz.png"
        it = [items[str(player[f'item{i}Id'])] for i in range(6) if player[f'item{i}Id']] + [
            items[str(player[f'backpack{i}Id'])] for i in range(3) if player[f'backpack{i}Id']]
        items_text = ' | '.join(it) if it else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

        text = (
            f"üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞:\n\n"
            f"üïí –î–∞—Ç–∞: {date}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
            f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n\n"
            f"üåï{sum(match['radiantKills'])}‚öîÔ∏è{sum(match['direKills'])}üåë\n"
            f"üßô‚Äç‚ôÇÔ∏è –ì–µ—Ä–æ–π: {hero_name}\n"
            f"‚¨ÜÔ∏è –£—Ä–æ–≤–µ–Ω—å: {player['level']}\n"
            f"‚öîÔ∏è K/D/A: {player['kills']}/{player['deaths']}/{player['assists']}\n"
            f"üü¢ –î–æ–±–∏–≤–∞–Ω–∏—è: {player['numLastHits']}\n"
            f"üî¥ –ù–µ –æ—Ç–¥–∞–Ω–æ: {player['numDenies']}\n"
            f"üíé –¶–µ–Ω–Ω–æ—Å—Ç—å: {player['networth']}\n"
            f"üí∞ GPM: {player['goldPerMinute']}\n"
            f"üìà XPM: {player['experiencePerMinute']}\n"
            f"üí• –£—Ä–æ–Ω: {player['heroDamage']}\n\n"
            f"üéí –ü—Ä–µ–¥–º–µ—Ç—ã:\n {items_text}\n\n"
            f'üóø–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤:\n'
            f'KDA: {round((avg_stats[hero_id-1]['kills'] + avg_stats[hero_id-1]['assists']) / avg_stats[hero_id-1]['deaths'], 1)}({round(data[5][0], 1)}%)\n'
            f'GPM: {round(avg_stats[hero_id-1]['networth'] / avg_stats[hero_id-1]['time'], 1)}({round(data[5][2], 1)}%)\n'
            f'XPM: {round(avg_stats[hero_id-1]['xp'] / avg_stats[hero_id-1]['time'], 1)}({round(data[5][1], 1)}%)\n'
            f'–¶–µ–Ω–Ω–æ—Å—Ç—å: {round(avg_stats[hero_id-1]['networth'], 1)}({round(data[5][3], 1)}%)\n'
            f"ü§ñ–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –≤–µ—Ä—Å–∏–∏ DotaLens: {round(data[0], 1)} Score \n"
            f"üëæ–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –≤–µ—Ä—Å–∏–∏ Stratz:\nScore | {player['imp']} | "
        )

        if -40 >= player['imp']:
            text += f"–£–∂–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif -20 >= player['imp']:
            text += f"–û—á–µ–Ω—å —Å–ª–∞–±–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif -10 >= player['imp']:
            text += f"–°–ª–∞–±–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif 10 > player['imp']:
            text += f"–°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif 20 > player['imp']:
            text += f"–•–æ—Ä–æ—à–µ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif 40 > player['imp']:
            text += f"–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"
        else:
            text += f"–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"

        text += f'\n**(–°—Ä–µ–¥–Ω–∏–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º —è–≤–ª—è–µ—Ç—Å—è 0, —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç—Ç–æ!)\n\n'
        text += f"üÜî {match['id']}"

        await callback.message.delete()

        await callback.message.answer_photo(
            photo=hero_image,
            caption=text,
            reply_markup=match_back(match['id'])
        )
    except Exception as e:
        await callback.message.delete()
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–µ",
            reply_markup=back_button()
        )
    finally:
        await callback.answer()


@router.callback_query(F.data == "meta")
async def show_meta(callback: CallbackQuery):
    try:
        response = await make_graphql_request(META_QUERY, {})
        heroes = response.get('data', {}).get('heroStats', {}).get('winMonth', [])

        if not heroes:
            return await callback.message.edit_text(
                "–î–∞–Ω–Ω—ã–µ –º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=back_button()
            )

        win_rate = []
        for hero in heroes:
            win_rate.append({'id': str(hero['heroId']), 'winRate': hero['winCount'] / hero['matchCount']})

        win_rate = sorted(win_rate, key=itemgetter('winRate'), reverse=True)
        meta = {"Carry": [],
                "Initiator": [],
                "Escape": [],
                "Nuker": [],
                "Durable": [],
                "Disabler": [],
                "Pusher": [],
                "Support": []}

        with open('jsons/heroes.json', 'r') as f:
            file = json.load(f)
            for i in win_rate:
                id_ = i['id']
                win_ = i['winRate']
                roles = file[id_][2]
                for r in roles:
                    if r.capitalize() in meta:
                        meta[r.capitalize()].append({file[id_][1]: win_})
        text = 'üìä –¢–µ–∫—É—â–∞—è –º–µ—Ç–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:\n\n'
        medals = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£']
        for pos, h in meta.items():
            text += f'{chr(random.randint(0x1F600, 0x1F64F))}{pos}:\n'
            for i, val in enumerate(h[:5]):
                for k, v in val.items():
                    text += f'{medals[i]} {k} - {v * 100:.2f}%\n'
            text += '\n'

        await callback.message.delete()
        await callback.message.answer(
            text,
            reply_markup=back_button()
        )

    except Exception as e:
        await callback.message.delete()
        await callback.message.answer(
            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—ã",
            reply_markup=back_button()
        )
    finally:
        await callback.answer()


@router.callback_query(F.data == "top_heroes")
async def show_top_heroes(callback: CallbackQuery):
    try:
        steam_id = user_data.get(callback.from_user.id)
        take = 25
        user_response = await make_graphql_request(
            TOP_HEROES,
            {"steamId": int(steam_id), 'take': take}
        )
        matches = user_response.get('data', {}).get('player', {}).get('matches', [])
        avg_stats = user_response.get('data', {}).get('heroStats', {}).get('stats', [])

        win, kills, deaths, assists, scores = 0, 0, 0, 0, []
        with open('jsons/heroes.json', 'r') as f:
            file = json.load(f)
            for match in matches:
                hero_id = match['players'][0]['hero']['id']
                data = analytics(match, avg_stats[hero_id - 1])
                win += data[1]
                kills += data[2]
                deaths += data[3]
                assists += data[4]
                scores.append({'id': hero_id, 'score': data[0], 'shortName': file[str(hero_id)][0],
                               'displayName': file[str(hero_id)][1]})

        scores_sorted = sorted(scores, key=itemgetter('score'), reverse=True)

        text = ('–†–µ–π—Ç–∏–Ω–≥ (score) - —ç—Ç–æ —Ñ–æ—Ä–º—É–ª–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–º —Ä–∞—Å—á—ë—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–µ—Ä–æ—è –≤ –∏–≥—Ä–µ.\n\n'
                '‚ú®–í–∞—à –¢–∏—Ä–ª–∏—Å—Ç –ì–µ—Ä–æ–µ–≤\n\n'
                f'ü•á{scores_sorted[0]["displayName"]} {round(scores_sorted[0]["score"], 1)}\n'
                f'ü•à{scores_sorted[1]["displayName"]} {round(scores_sorted[1]["score"], 1)}\n'
                f'ü•â{scores_sorted[2]["displayName"]} {round(scores_sorted[2]["score"], 1)}\n\n'
                f'üéÆ–ë—ã–ª–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {take} –º–∞—Ç—á–µ–π.\n\n'
                f'üìä–í–∞—à–∞ –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n'
                f'üèÜ–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {round(win / take * 100, 1)}\n'
                f'‚öîÔ∏èKDA (K + A / D): {round((kills + assists) / deaths, 1)}\n'
                f'üó°Ô∏è–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —É–±–∏–π—Å—Ç–≤: {round(kills / take, 1)}\n'
                f'‚ò†Ô∏è–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Å–º–µ—Ä—Ç–µ–π: {round(deaths / take, 1)}\n'
                f'ü§ù–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –∞—Å—Å–∏—Å—Ç–æ–≤: {round(assists / take, 1)}\n'
                f'üì¢–í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å—Ä–µ–¥–Ω–∏–µ –∏–ª–∏ –Ω–∏–∂–µ. –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.\n'
                )

        await callback.message.delete()
        await callback.message.answer_photo(
            photo=f"https://cdn.stratz.com/images/dota2/heroes/{scores_sorted[0]['shortName']}_horz.png",
            caption=text,
            reply_markup=back_button()
        )
    except Exception as e:
        await callback.message.delete()
        await callback.message.answer(
            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥–µ—Ä–æ—è—Ö",
            reply_markup=back_button()
        )
    finally:
        await callback.answer()


def analytics(match: dict, stat: dict):
    match = match['players'][0]
    kda = (((match['kills'] + match['assists']) / match['deaths']) - (
            (stat['kills'] + stat['assists']) / stat['deaths']))
    xpm = (match['experiencePerMinute'] - stat['xp'] / stat['time']) / 100
    gpm = (match['goldPerMinute'] - stat['networth'] / stat['time']) / 100
    net = (match['networth'] - stat['networth']) / 3000

    kda_p = (((match['kills'] + match['assists']) / match['deaths']) - (
            (stat['kills'] + stat['assists']) / stat['deaths'])) / (
                    (stat['kills'] + stat['assists']) / stat['deaths']) * 100
    xpm_p = (match['experiencePerMinute'] - stat['xp'] / stat['time']) / (stat['xp'] / stat['time']) * 100
    gpm_p = (match['goldPerMinute'] - stat['networth'] / stat['time']) / (stat['networth'] / stat['time']) * 100
    net_p = (match['networth'] - stat['networth']) / stat['networth'] * 100

    score = (0.3 * kda + 0.25 * gpm + 0.25 * xpm + 0.2 * net) * 10

    return (score, match['isVictory'], match['kills'], match['deaths'], match['assists'], [kda_p, xpm_p, gpm_p, net_p])
